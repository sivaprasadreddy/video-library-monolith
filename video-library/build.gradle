plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.gorylenko.gradle-git-properties' version "2.4.1"
    id 'org.sonarqube' version "3.0"
    id "com.github.sherter.google-java-format" version "0.9"
    id 'com.google.cloud.tools.jib' version "3.2.1"
}

def jacocoToolVersion = "0.8.8"
def jacocoMinCoverageRequired = 0.30
def googleJavaFormatToolVersion = "1.12.0"

group = 'com.sivalabs'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2021.0.3")
    set('testcontainersVersion', "1.17.3")
    set('bootstrapVersion', "5.1.3")
    set('webjarsLocatorVersion', "0.45")
    set('jqueryVersion', "3.6.0")
    set('fontAwesomeVersion', "6.1.0")
    set('commonsLangVersion', "3.12.0")
    set('commonsIoVersion', "2.11.0")
    set('opencsvVersion', "5.0")
    set('archunitVersion', "0.23.1")
    set('datafakerVersion', "1.4.0")
    set('seleniumVersion', "4.2.1")
    set('webdrivermanagerVersion', "5.2.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    implementation "org.webjars:webjars-locator:${webjarsLocatorVersion}"
    implementation "org.webjars:bootstrap:${bootstrapVersion}"
    implementation "org.webjars:jquery:${jqueryVersion}"
    implementation "org.webjars:font-awesome:${fontAwesomeVersion}"

    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "com.opencsv:opencsv:${opencsvVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunitVersion}"
    testImplementation "net.datafaker:datafaker:${datafakerVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testImplementation "io.github.bonigarcia:webdrivermanager:${webdrivermanagerVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

springBoot {
    buildInfo()
}

bootBuildImage {
    imageName = "sivaprasadreddy/video-library"
}


bootRun {
    args = ["--spring.profiles.active=default"]
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.user.name", "git.commit.message.full"]
}

jib {
    from {
        image = 'eclipse-temurin:17-jre-focal'
    }
    to {
        image = 'sivaprasadreddy/video-library'
        tags = ['latest']
    }
    container {
        jvmFlags = ['-Xms512m', '-Xdebug']
        mainClass = 'com.sivalabs.videolibrary.VideoLibraryApplication'
        args = []
        ports = ['8080/tcp']
    }
}

googleJavaFormat {
    toolVersion = googleJavaFormatToolVersion
    options style: 'AOSP'
}

check.dependsOn verifyGoogleJavaFormat

test {
    useJUnitPlatform()
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        //showStandardStreams = true
        exceptionFormat = "full"
    }
}

jacoco {
    toolVersion = jacocoToolVersion
}

def jacocoExcludes = [
        'com/sivalabs/todolist/*Application.*',
]

jacocoTestReport {
    executionData tasks.withType(Test)
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn "test"
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = jacocoMinCoverageRequired
            }
            excludes = jacocoExcludes
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

file("sonar-project.properties").withReader {
    Properties sonarProperties = new Properties()
    sonarProperties.load(it)

    sonarProperties.each { key, value ->
        sonarqube {
            properties {
                property key, value
            }
        }
    }
}
